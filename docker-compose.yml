version: '3.8'

services:

  node-app:
    build: .
    image: express-ts
    environment:
      - MONGODB_URL=mongodb://mongo1:30001/arc
    ports:
      - '3000:3000'
    depends_on:
      - mongo1
    volumes:
      - .:/usr/src/node-app
    networks:
      - node-network

  mongo1:
    #    image: mongo:5
    image: mongo:7.0
    container_name: mongo1
    command: [ "--replSet", "my-replica-set", "--bind_ip_all", "--port", "30001" ]
    volumes:
      - ./data/mongo-1:/data/db
    ports:
      - "30001:30001"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'my-replica-set',members:[{_id:0,host:'mongo1:30001',priority:1},{_id:1,host:'mongo2:30002',priority:0.5},{_id:2,host:'mongo3:30003',priority:0.5}]}) }" | mongosh --port 30001 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    networks:
      - node-network

  mongo2:
    #    image: mongo:5
    image: mongo:7.0
    container_name: mongo2
    command: [ "--replSet", "my-replica-set", "--bind_ip_all", "--port", "30002" ]
    volumes:
      - ./data/mongo-2:/data/db
    ports:
      - "30002:30002"
    networks:
      - node-network

  mongo3:
    #    image: mongo:5
    image: mongo:7.0
    container_name: mongo3
    command: [ "--replSet", "my-replica-set", "--bind_ip_all", "--port", "30003" ]
    volumes:
      - ./data/mongo-3:/data/db
    ports:
      - "30003:30003"
    networks:
      - node-network

volumes:
  db-data:

networks:
  node-network:
    driver: bridge
